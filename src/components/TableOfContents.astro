---
---
<nav class="toc-container animate">
    <div class="toc-header">
      <button 
        class="flex items-center justify-between w-full text-xs font-semibold text-black dark:text-white"
        aria-expanded="true"
        aria-controls="toc-list"
      >
        Table of Contents
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transform transition-transform duration-200">
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </button>
    </div>
    <div class="toc-content" id="toc-content">
      <ul class="text-xs space-y-1 transition-all duration-200" id="toc-list"></ul>
    </div>
  </nav>
  
  <script>
    function init() {
      const tocButton = document.querySelector('.toc-header button');
      const tocContent = document.getElementById('toc-content');
      const tocList = document.getElementById('toc-list');
      
      // Only proceed if we found the TOC elements
      if (!tocButton || !tocContent || !tocList) return;
      
      // Toggle main TOC
      tocButton.addEventListener('click', () => {
        const isExpanded = tocButton.getAttribute('aria-expanded') === 'true';
        tocButton.setAttribute('aria-expanded', !isExpanded);
        tocContent.classList.toggle('collapsed');
        tocButton.querySelector('svg')?.classList.toggle('rotate-180');
      });
  
      function createNestedTOC(headings) {
        const toc = [];
        const stack = [{ level: 0, children: toc }];
    
        headings.forEach((heading) => {
          const level = Number(heading.tagName.substring(1));
          const entry = {
            id: heading.id,
            title: heading.textContent,
            level,
            children: []
          };
    
          while (level <= stack[stack.length - 1].level) {
            stack.pop();
          }
          stack[stack.length - 1].children.push(entry);
          stack.push(entry);
        });
    
        return toc;
      }
    
      function renderTOCItem(item) {
        const hasChildren = item.children && item.children.length > 0;
        return `
          <li class="toc-item" data-heading-id="${item.id}">
            <div class="grid items-center" style="grid-template-columns: ${(item.level - 2) * 12}px 20px 1fr">
              <span></span>
              ${hasChildren ? `
                <button class="section-toggle p-0.5 hover:bg-gray-100 dark:hover:bg-gray-800 rounded transition-colors">
                  <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transform transition-transform duration-200 rotate-180">
                    <polyline points="6 9 12 15 18 9"></polyline>
                  </svg>
                </button>
              ` : `<span></span>`}
              <a href="#${item.id}" 
                 class="block py-0.5 transition-all duration-300 ease-in-out text-gray-500 dark:text-gray-400 hover:text-black hover:dark:text-white"
                 data-text="${item.title}">
                ${item.title}
              </a>
            </div>
            ${hasChildren ? `
              <ul class="nested-toc space-y-1">
                ${item.children.map(child => renderTOCItem(child)).join('')}
              </ul>
            ` : ''}
          </li>
        `;
      }
    
      function updateActiveHeading() {
        const headings = Array.from(document.querySelectorAll("article h1, article h2, article h3, article h4, article h5, article h6"))
          .filter((element) => element.id);
    
        if (!tocList) return;
    
        // Build nested TOC
        const nestedTOC = createNestedTOC(headings);
        tocList.innerHTML = nestedTOC.map(item => renderTOCItem(item)).join('');
    
        // Add click handlers for section toggles
        document.querySelectorAll('.section-toggle').forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            const listItem = button.closest('li');
            const nestedToc = listItem?.querySelector('.nested-toc');
            button.querySelector('svg')?.classList.toggle('rotate-0');
            nestedToc?.classList.toggle('hidden');
          });
        });
    
        // Set up intersection observer
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                document.querySelectorAll(".toc-item a").forEach(link => {
                  link.classList.remove("text-black", "dark:text-white", "font-medium");
                  link.classList.add("text-gray-500", "dark:text-gray-400");
                });
                
                const activeLink = document.querySelector(`.toc-item[data-heading-id="${entry.target.id}"] a`);
                if (activeLink) {
                  activeLink.classList.remove("text-gray-500", "dark:text-gray-400");
                  activeLink.classList.add("text-black", "dark:text-white", "font-medium");
                }
              }
            });
          },
          { rootMargin: "0% 0% -80% 0%" }
        );
    
        headings.forEach((heading) => observer.observe(heading));
      }

      // Run updateActiveHeading immediately
      updateActiveHeading();

      // Also run it after a short delay to ensure content is loaded
      setTimeout(updateActiveHeading, 100);
    }

    // Run on both initial load and view transitions
    document.addEventListener('DOMContentLoaded', init);
    document.addEventListener('astro:page-load', init);
    document.addEventListener('astro:after-swap', init);
  </script>
  
  <style>
    .toc-container {
      @apply p-3 rounded-lg border;
      @apply bg-stone-200/20 dark:bg-stone-800/30; /* Use Tailwind's background utilities */
      @apply border-black/10 dark:border-white/10; /* Use Tailwind's border utilities */
      @apply transition-all duration-300 ease-in-out;
      @apply hover:border-black/20 dark:hover:border-white/20;
      @apply lg:max-w-[220px];
    }
  
    .toc-header {
      @apply mb-2 pb-2 border-b border-black/10 dark:border-white/10;
    }
  
    .toc-content {
      @apply max-h-[calc(100vh-200px)] overflow-y-auto transition-all duration-200;
    }
  
    .toc-content.collapsed {
      @apply max-h-0 overflow-hidden;
    }
  
    /* Hide scrollbar */
    .toc-content {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }
  
    .toc-content::-webkit-scrollbar {
      display: none;
    }
  
    /* Responsive */
    @media (max-width: 1024px) {
      .toc-container {
        @apply max-w-full;
      }
    }
  
    /* Example: Ensure TOC items always reserve the width of their bold state */
  </style>